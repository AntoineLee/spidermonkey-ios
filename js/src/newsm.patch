Only in .: .deps
Only in .: .jsobj.cpp.swp
Only in .: ArgumentsObject.o
Only in .: BytecodeCompiler.o
Only in .: BytecodeEmitter.o
Only in .: Debugger.o
Only in .: Eval.o
Only in .: ExecutableAllocator.o
Only in .: ExecutableAllocatorPosix.o
Only in .: FoldConstants.o
Only in .: GlobalObject.o
Only in .: HashFunctions.o
Only in .: LifoAlloc.o
Only in .: Makefile
diff -aur /Users/cat/Downloads/origsm/js/src/Makefile.in ./Makefile.in
--- /Users/cat/Downloads/origsm/js/src/Makefile.in	2012-11-07 11:54:41.000000000 -0800
+++ ./Makefile.in	2012-11-12 16:34:04.000000000 -0800
@@ -407,32 +407,32 @@
            $(NONE)
 endif
 
-ifneq (,$(filter arm% sparc %86 x86_64 mips%,$(TARGET_CPU)))
-ENABLE_YARR_JIT = 1
-DEFINES += -DENABLE_YARR_JIT=1
-
-VPATH += 	$(srcdir)/assembler/assembler \
-		$(srcdir)/methodjit \
-		$(NONE)
-
-CPPSRCS +=	ARMAssembler.cpp \
-		MacroAssemblerARM.cpp \
-		MacroAssemblerX86Common.cpp \
-		YarrJIT.cpp \
-		$(NONE)
-
-ifeq (86, $(findstring 86,$(TARGET_CPU)))
-ifeq (x86_64, $(TARGET_CPU))
-#CPPSRCS		+= only_on_x86_64.cpp
-else
-#CPPSRCS		+= only_on_x86.cpp
-endif
-endif
-ifeq (arm, $(findstring arm, $(TARGET_CPU)))
-#CPPSRCS		+= only_on_arm.cpp
-endif
-
-endif
+#ifneq (,$(filter arm% sparc %86 x86_64 mips%,$(TARGET_CPU)))
+#ENABLE_YARR_JIT = 1
+#DEFINES += -DENABLE_YARR_JIT=1
+#
+#VPATH += 	$(srcdir)/assembler/assembler \
+#		$(srcdir)/methodjit \
+#		$(NONE)
+#
+#CPPSRCS +=	ARMAssembler.cpp \
+#		MacroAssemblerARM.cpp \
+#		MacroAssemblerX86Common.cpp \
+#		YarrJIT.cpp \
+#		$(NONE)
+#
+#ifeq (86, $(findstring 86,$(TARGET_CPU)))
+#ifeq (x86_64, $(TARGET_CPU))
+##CPPSRCS		+= only_on_x86_64.cpp
+#else
+##CPPSRCS		+= only_on_x86.cpp
+#endif
+#endif
+#ifeq (arm, $(findstring arm, $(TARGET_CPU)))
+##CPPSRCS		+= only_on_arm.cpp
+#endif
+#
+#endif
 
 #
 # END enclude sources for the Nitro assembler
Only in .: MapObject.o
Only in .: Marking.o
Only in .: Memory.o
Only in .: NameFunctions.o
Only in .: OSAllocatorPosix.o
Only in .: ObjectImpl.o
Only in .: PageBlock.o
Only in .: ParallelArray.o
Only in .: ParseMaps.o
Only in .: ParseNode.o
Only in .: Parser.o
Only in .: Profilers.o
Only in .: RegExp.o
Only in .: RegExpObject.o
Only in .: RegExpStatics.o
Only in .: SHA1.o
Only in .: SPSProfiler.o
Only in .: ScopeObject.o
Only in .: Stack.o
Only in .: Statistics.o
Only in .: StoreBuffer.o
Only in .: String.o
Only in .: StringBuffer.o
Only in .: TestingFunctions.o
Only in .: TokenStream.o
Only in .: Unicode.o
Only in .: Xdr.o
Only in .: YarrCanonicalizeUCS2.o
Only in .: YarrInterpreter.o
Only in .: YarrPattern.o
Only in .: YarrSyntaxChecker.o
Only in .: bignum-dtoa.o
Only in .: bignum.o
Only in ./build: ConfigStatus.pyc
Only in .: build.sh
Only in ./builtin: js2c.pyc
Only in ./builtin: jsmin.pyc
Only in .: cached-powers.o
Only in ./config: Expression.pyc
Only in ./config: Makefile
Only in ./config: Preprocessor.pyc
Only in ./config: autoconf.mk
Only in ./config: expandlibs.pyc
Only in ./config: expandlibs_config.py
Only in ./config: expandlibs_config.pyc
Only in ./config: host_nsinstall.o
Only in ./config: host_pathsub.o
Only in ./config: nsinstall
Only in ./config: nsinstall_real
Only in .: config.cache
Only in .: config.log
Only in .: config.status
diff -aur /Users/cat/Downloads/origsm/js/src/configure ./configure
--- /Users/cat/Downloads/origsm/js/src/configure	2012-11-16 17:25:06.000000000 -0800
+++ ./configure	2012-11-12 16:34:04.000000000 -0800
@@ -95,6 +95,18 @@
   --with-gonk-toolchain-prefix=DIR
                           prefix to gonk toolchain commands"
 ac_help="$ac_help
+  --with-ios-target=SDK
+                     what target sdk to use, defaults to iPhoneSimulator"
+ac_help="$ac_help
+  --with-ios-version=VER
+                      version of the iOS SDK, defaults to 6.0"
+ac_help="$ac_help
+  --with-ios-min-version=VER
+                          deploy target version, defaults to 4.3"
+ac_help="$ac_help
+  --with-ios-arch=ARCH
+                   iOS architecture, defaults to armv7 for device, x86 for simulator"
+ac_help="$ac_help
   --with-android-ndk=DIR
                           location where the Android NDK can be found"
 ac_help="$ac_help
@@ -1287,6 +1299,13 @@
 fi
 
 
+# Check whether --with-ios-target or --without-ios-target was given.
+if test "${with_ios_target+set}" = set; then
+  withval="$with_ios_target"
+  ios_target=$withval
+fi
+
+
 if test -n "$gonkdir" ; then
     kernel_name=`uname -s | tr "[:upper:]" "[:lower:]"`
 
@@ -1347,6 +1366,104 @@
 EOF
 
     CROSS_COMPILE=1
+
+elif test -n "$ios_target" ; then
+    
+
+# Check whether --with-ios-version or --without-ios-version was given.
+if test "${with_ios_version+set}" = set; then
+  withval="$with_ios_version"
+  ios_sdk_version=$withval
+else
+  ios_sdk_version=6.0
+fi
+
+
+# Check whether --with-ios-min-version or --without-ios-min-version was given.
+if test "${with_ios_min_version+set}" = set; then
+  withval="$with_ios_min_version"
+  ios_deploy_version=$withval
+else
+  ios_deploy_version=4.3
+fi
+
+
+# Check whether --with-ios-arch or --without-ios-arch was given.
+if test "${with_ios_arch+set}" = set; then
+  withval="$with_ios_arch"
+  ios_arch=$withval
+fi
+
+
+case "$ios_target" in
+iPhoneOS|iPhoneSimulator)
+        if ! test -d "/Applications/Xcode.app/Contents/Developer/Platforms" ; then
+        { echo "configure: error: You must install Xcode first from the App Store" 1>&2; exit 1; }
+    fi
+
+    if test "$ios_target" == "iPhoneSimulator" ; then
+                CPU_ARCH=i386
+        ios_arch=i386
+        target_name=x86
+        target=i386-darwin
+		IOS_OPT_FLAGS=""
+    else
+        if test -z "$ios_arch" ; then
+            ios_arch=armv7
+        fi 
+        target_name=arm
+        target=arm-darwin
+		IOS_OPT_FLAGS="-mvectorize-with-neon-quad -fprefetch-loop-arrays -mfloat-abi=hard -ftree-vectorize -march=armv7-a -mfpu=vfpv3-d16"
+    fi
+    target_os=darwin
+
+    xcode_base="/Applications/Xcode.app/Contents/Developer/Platforms"
+    ios_sdk_root=""
+    ios_toolchain="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin"
+
+        ios_sdk_root="$xcode_base"/$ios_target.platform/Developer/SDKs/$ios_target"$ios_sdk_version".sdk
+    if ! test -d "$ios_sdk_root" ; then
+        { echo "configure: error: Invalid SDK version" 1>&2; exit 1; }
+    fi
+
+        AS="$ios_toolchain"/as
+    CC="$ios_toolchain"/clang
+    CXX="$ios_toolchain"/clang++
+    CPP="$ios_toolchain/clang -E"
+    LD="$ios_toolchain"/ld
+    AR="$ios_toolchain"/ar
+    AS="$ios_toolchain/as -arch armv7"
+    RANLIB="$ios_toolchain"/ranlib
+    STRIP="$ios_toolchain"/strip
+    LDFLAGS="-isysroot $ios_sdk_root -arch $ios_arch -v"
+
+    CFLAGS="-isysroot $ios_sdk_root -arch $ios_arch -miphoneos-version-min=$ios_deploy_version -I$ios_sdk_root/usr/include -pipe -Wno-implicit-int -Wno-return-type -integrated-as $IOS_OPT_FLAGS"
+    CXXFLAGS="$CFLAGS"
+    CPPFLAGS=""
+
+        if test -z "$HOST_CPPFLAGS" ; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS" ; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS" ; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS" ; then
+        HOST_LDFLAGS=" "
+    fi
+
+    cat >> confdefs.pytmp <<\EOF
+        (''' IPHONEOS ''', ' 1 ')
+EOF
+cat >> confdefs.h <<\EOF
+#define IPHONEOS 1
+EOF
+
+    CROSS_COMPILE=1
+esac
+
 else
     
 
@@ -12893,10 +13010,10 @@
 
 if test "$ENABLE_METHODJIT_SPEW"; then
     cat >> confdefs.pytmp <<\EOF
-    (''' JS_METHODJIT_SPEW ''', ' 1 ')
+    (''' JS_METHODJIT_SPEW ''', ' 0 ')
 EOF
 cat >> confdefs.h <<\EOF
-#define JS_METHODJIT_SPEW 1
+#define JS_METHODJIT_SPEW 0
 EOF
 
 fi
Only in .: dist
Only in .: diy-fp.o
Only in .: double-conversion.o
Only in ./editline: .deps
Only in ./editline: Makefile
Only in ./editline: editline.o
Only in ./editline: libeditline.a.desc
Only in ./editline: sysunix.o
Only in .: fast-dtoa.o
Only in .: fixed-dtoa.o
diff -aur /Users/cat/Downloads/origsm/js/src/frontend/BytecodeEmitter.cpp ./frontend/BytecodeEmitter.cpp
--- /Users/cat/Downloads/origsm/js/src/frontend/BytecodeEmitter.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./frontend/BytecodeEmitter.cpp	2012-11-12 16:34:04.000000000 -0800
@@ -3238,6 +3238,10 @@
     return true;
 }
 
+#else
+
+struct LetNotes;
+
 #endif /* JS_HAS_DESTRUCTURING */
 
 static bool
diff -aur /Users/cat/Downloads/origsm/js/src/frontend/Parser.cpp ./frontend/Parser.cpp
--- /Users/cat/Downloads/origsm/js/src/frontend/Parser.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./frontend/Parser.cpp	2012-11-12 16:34:04.000000000 -0800
@@ -3177,6 +3177,7 @@
         if (!pn3)
             return NULL;
 
+#if JS_HAS_BLOCK_SCOPE
         if (blockObj) {
             /*
              * Now that the pn3 has been parsed, push the let scope. To hold
@@ -3192,6 +3193,7 @@
             block->pn_pos = pn1->pn_pos;
             pn1 = block;
         }
+#endif
 
         if (forDecl) {
             /*
@@ -3235,6 +3237,7 @@
         if (!forHead)
             return NULL;
     } else {
+#if JS_HAS_BLOCK_SCOPE
         if (blockObj) {
             /*
              * Desugar 'for (let A; B; C) D' into 'let (A) { for (; B; C) D }'
@@ -3253,6 +3256,7 @@
             block->pn_expr = pn;
             forParent = let;
         }
+#endif
 
         if (pn->pn_iflags & JSITER_FOREACH) {
             reportError(pn, JSMSG_BAD_FOR_EACH_LOOP);
@@ -5382,19 +5386,19 @@
 ParseNode *
 Parser::assignExprWithoutYield(unsigned msg)
 {
-#ifdef JS_HAS_GENERATORS
+#if JS_HAS_GENERATORS
     GenexpGuard yieldGuard(this);
 #endif
     ParseNode *res = assignExpr();
+#if JS_HAS_GENERATORS
     yieldGuard.endBody();
     if (res) {
-#ifdef JS_HAS_GENERATORS
         if (!yieldGuard.checkValidBody(res, msg)) {
             freeTree(res);
             res = NULL;
         }
-#endif
     }
+#endif
     return res;
 }
 
@@ -5404,15 +5408,19 @@
     if (tokenStream.matchToken(TOK_RP, TSF_OPERAND))
         return true;
 
+#if JS_HAS_GENERATOR_EXPRS
     GenexpGuard guard(this);
+#endif
     bool arg0 = true;
 
     do {
         ParseNode *argNode = assignExpr();
         if (!argNode)
             return false;
+#if JS_HAS_GENERATOR_EXPRS
         if (arg0)
             guard.endBody();
+#endif
 
 #if JS_HAS_GENERATORS
         if (argNode->isKind(PNK_YIELD) &&
@@ -5436,8 +5444,11 @@
             }
         } else
 #endif
+#if JS_HAS_GENERATOR_EXPRS
         if (arg0 && !guard.maybeNoteGenerator(argNode))
             return false;
+        // TODO: MAYBE BROKE HERE -cat
+#endif
 
         arg0 = false;
 
@@ -7023,12 +7034,16 @@
     if (genexp)
         *genexp = false;
 
+#if JS_HAS_GENERATOR_EXPRS
     GenexpGuard guard(this);
+#endif
 
     pn = bracketedExpr();
     if (!pn)
         return NULL;
+#if JS_HAS_GENERATOR_EXPRS
     guard.endBody();
+#endif
 
 #if JS_HAS_GENERATOR_EXPRS
     if (tokenStream.matchToken(TOK_FOR)) {
@@ -7054,8 +7069,10 @@
     } else
 #endif /* JS_HAS_GENERATOR_EXPRS */
 
+#if JS_HAS_GENERATOR_EXPRS
     if (!guard.maybeNoteGenerator(pn))
         return NULL;
+#endif
 
     return pn;
 }
diff -aur /Users/cat/Downloads/origsm/js/src/gc/StoreBuffer.cpp ./gc/StoreBuffer.cpp
--- /Users/cat/Downloads/origsm/js/src/gc/StoreBuffer.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./gc/StoreBuffer.cpp	2012-11-12 16:34:04.000000000 -0800
@@ -133,7 +133,7 @@
 void
 StoreBuffer::RelocatableMonoTypeBuffer<T>::unput(const T &v)
 {
-    put(v.tagged());
+    this->put(v.tagged());
 }
 
 /*** GenericBuffer ***/
Only in .: host_jskwgen
Only in .: host_jskwgen.o
Only in .: host_jsoplengen
Only in .: host_jsoplengen.o
Only in .: js
Only in .: js-confdefs.h
Only in .: js-config
Only in .: js-config.h
Only in .: jsalloc.o
Only in .: jsanalyze.o
Only in ./jsapi-tests: Makefile
diff -aur /Users/cat/Downloads/origsm/js/src/jsapi.h ./jsapi.h
--- /Users/cat/Downloads/origsm/js/src/jsapi.h	2012-11-07 11:54:41.000000000 -0800
+++ ./jsapi.h	2012-11-17 01:04:54.000000000 -0800
@@ -2609,13 +2609,14 @@
 JS_ALWAYS_INLINE bool
 ToNumber(JSContext *cx, const Value &v, double *out)
 {
-    AssertCanGC();
+    // TODO: This might break something.  Check it out! -cat
+/*    AssertCanGC();
     AssertArgumentsAreSane(cx, v);
     {
         js::SkipRoot root(cx, &v);
         js::MaybeCheckStackRoots(cx);
     }
-
+*/
     if (v.isNumber()) {
         *out = v.toNumber();
         return true;
@@ -2702,13 +2703,13 @@
 JS_ALWAYS_INLINE bool
 ToUint16(JSContext *cx, const js::Value &v, uint16_t *out)
 {
-    AssertCanGC();
+/*    AssertCanGC();
     AssertArgumentsAreSane(cx, v);
     {
         js::SkipRoot skip(cx, &v);
         js::MaybeCheckStackRoots(cx);
     }
-
+*/
     if (v.isInt32()) {
         *out = uint16_t(v.toInt32());
         return true;
@@ -2719,13 +2720,13 @@
 JS_ALWAYS_INLINE bool
 ToInt32(JSContext *cx, const js::Value &v, int32_t *out)
 {
-    AssertCanGC();
+/*    AssertCanGC();
     AssertArgumentsAreSane(cx, v);
     {
         js::SkipRoot root(cx, &v);
         js::MaybeCheckStackRoots(cx);
     }
-
+*/
     if (v.isInt32()) {
         *out = v.toInt32();
         return true;
@@ -2736,13 +2737,13 @@
 JS_ALWAYS_INLINE bool
 ToUint32(JSContext *cx, const js::Value &v, uint32_t *out)
 {
-    AssertCanGC();
+/*    AssertCanGC();
     AssertArgumentsAreSane(cx, v);
     {
         js::SkipRoot root(cx, &v);
         js::MaybeCheckStackRoots(cx);
     }
-
+*/
     if (v.isInt32()) {
         *out = uint32_t(v.toInt32());
         return true;
@@ -2753,13 +2754,13 @@
 JS_ALWAYS_INLINE bool
 ToInt64(JSContext *cx, const js::Value &v, int64_t *out)
 {
-    AssertCanGC();
+/*    AssertCanGC();
     AssertArgumentsAreSane(cx, v);
     {
         js::SkipRoot skip(cx, &v);
         js::MaybeCheckStackRoots(cx);
     }
-
+*/
     if (v.isInt32()) {
         *out = int64_t(v.toInt32());
         return true;
@@ -2771,13 +2772,13 @@
 JS_ALWAYS_INLINE bool
 ToUint64(JSContext *cx, const js::Value &v, uint64_t *out)
 {
-    AssertCanGC();
+/*    AssertCanGC();
     AssertArgumentsAreSane(cx, v);
     {
         js::SkipRoot skip(cx, &v);
         js::MaybeCheckStackRoots(cx);
     }
-
+*/
     if (v.isInt32()) {
         /* Account for sign extension of negatives into the longer 64bit space. */
         *out = uint64_t(int64_t(v.toInt32()));
Only in .: jsapi.o
Only in .: jsapi.o-070b7a87
Only in .: jsapi.o-51280a8c
Only in .: jsapi.o-75e798aa
Only in .: jsapi.o-7e2418c5
Only in .: jsapi.o-83528e4e
Only in .: jsapi.o-944a2581
Only in .: jsapi.o-b44e1fba
Only in .: jsapi.o-bd7ed71a
Only in .: jsapi.o-ca41682d
Only in .: jsapi.o-cd16d954
Only in .: jsapi.o-df5f9d1f
Only in .: jsapi.o-f20a7960
diff -aur /Users/cat/Downloads/origsm/js/src/jsarray.cpp ./jsarray.cpp
--- /Users/cat/Downloads/origsm/js/src/jsarray.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./jsarray.cpp	2012-11-19 14:32:42.000000000 -0800
@@ -1219,6 +1219,40 @@
         NULL,       /* iteratorObject  */
         NULL,       /* unused      */
         false,      /* isWrappedNative */
+    },
+    {
+        array_lookupGeneric,
+        array_lookupProperty,
+        array_lookupElement,
+        array_lookupSpecial,
+        array_defineGeneric,
+        array_defineProperty,
+        array_defineElement,
+        array_defineSpecial,
+        array_getGeneric,
+        array_getProperty,
+        array_getElement,
+        NULL, /* getElementIfPresent, because this is hard for now for
+                 slow arrays */
+        array_getSpecial,
+        array_setGeneric,
+        array_setProperty,
+        array_setElement,
+        array_setSpecial,
+        array_getGenericAttributes,
+        array_getPropertyAttributes,
+        array_getElementAttributes,
+        array_getSpecialAttributes,
+        array_setGenericAttributes,
+        array_setPropertyAttributes,
+        array_setElementAttributes,
+        array_setSpecialAttributes,
+        array_deleteProperty,
+        array_deleteElement,
+        array_deleteSpecial,
+        NULL,       /* enumerate      */
+        NULL,       /* typeOf         */
+        NULL,       /* thisObject     */
     }
 };
 
Only in .: jsarray.o
Only in .: jsarray.o-0d3794c0
Only in .: jsarray.o-a397ea0d
Only in .: jsarray.o-a4da864e
Only in .: jsarray.o-a97efbfd
Only in .: jsarray.o-b030de68
Only in .: jsarray.o-c6a28ef5
Only in .: jsatom.o
Only in .: jsautokw.h
Only in .: jsautooplen.h
Only in .: jsbool.o
Only in .: jsclone.o
diff -aur /Users/cat/Downloads/origsm/js/src/jscntxt.cpp ./jscntxt.cpp
--- /Users/cat/Downloads/origsm/js/src/jscntxt.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./jscntxt.cpp	2012-11-12 16:34:08.000000000 -0800
@@ -1339,7 +1339,9 @@
     functionCallback(NULL),
 #endif
     enumerators(NULL),
+#if JS_HAS_GENERATORS
     innermostGenerator_(NULL),
+#endif
 #ifdef DEBUG
     stackIterAssertionEnabled(true),
 #endif
@@ -1377,6 +1379,8 @@
 }
 
 
+#if JS_HAS_GENERATORS
+
 void
 JSContext::enterGenerator(JSGenerator *gen)
 {
@@ -1393,6 +1397,8 @@
     gen->prevGenerator = NULL;
 }
 
+#endif
+
 
 bool
 JSContext::runningWithTrustedPrincipals() const
diff -aur /Users/cat/Downloads/origsm/js/src/jscntxt.h ./jscntxt.h
--- /Users/cat/Downloads/origsm/js/src/jscntxt.h	2012-11-07 11:54:41.000000000 -0800
+++ ./jscntxt.h	2012-11-12 16:34:08.000000000 -0800
@@ -1557,6 +1557,7 @@
     /* List of currently active non-escaping enumerators (for-in). */
     js::PropertyIteratorObject *enumerators;
 
+#if JS_HAS_GENERATORS
   private:
     /* Innermost-executing generator or null if no generator are executing. */
     JSGenerator *innermostGenerator_;
@@ -1564,6 +1565,8 @@
     JSGenerator *innermostGenerator() const { return innermostGenerator_; }
     void enterGenerator(JSGenerator *gen);
     void leaveGenerator(JSGenerator *gen);
+#endif
+  public:
 
     inline void* malloc_(size_t bytes) {
         return runtime->malloc_(bytes, this);
Only in .: jscntxt.o
Only in .: jscompartment.o
Only in .: jscrashreport.o
Only in .: jsdate.o
Only in .: jsdbgapi.o
Only in .: jsdhash.o
Only in .: jsdtoa.o
Only in .: jsexn.o
Only in .: jsfriendapi.o
Only in .: jsfun.o
Only in .: jsgc.o
Only in .: jsinfer.o
diff -aur /Users/cat/Downloads/origsm/js/src/jsinterp.cpp ./jsinterp.cpp
--- /Users/cat/Downloads/origsm/js/src/jsinterp.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./jsinterp.cpp	2012-11-19 11:33:31.000000000 -0800
@@ -267,7 +267,9 @@
     JS_ASSERT(script);
     JS_ASSERT(fp == cx->fp());
     JS_ASSERT(fp->script() == script);
+#if JS_HAS_GENERATORS
     JS_ASSERT_IF(!fp->isGeneratorFrame(), cx->regs().pc == script->code);
+#endif
     JS_ASSERT_IF(fp->isEvalFrame(), script->isActiveEval);
 #ifdef JS_METHODJIT_SPEW
     JMCheckLogging();
@@ -285,7 +287,9 @@
         {}
         ~CheckStackBalance() {
             JS_ASSERT(fp == cx->fp());
+#if JS_HAS_GENERATORS
             JS_ASSERT_IF(!fp->isGeneratorFrame(), enumerators == cx->enumerators);
+#endif
         }
     } check(cx);
 #endif
@@ -1025,7 +1029,6 @@
 
 # define DO_OP()            goto do_op
 # define DO_NEXT_OP(n)      JS_BEGIN_MACRO                                    \
-                                JS_ASSERT((n) == len);                        \
                                 goto advance_pc;                              \
                             JS_END_MACRO
 
@@ -1175,12 +1178,16 @@
     /* Don't call the script prologue if executing between Method and Trace JIT. */
     if (interpMode == JSINTERP_NORMAL) {
         StackFrame *fp = regs.fp();
+#if JS_HAS_GENERATORS
         if (!fp->isGeneratorFrame()) {
+#endif
             if (!fp->prologue(cx, UseNewTypeAtEntry(cx, fp)))
                 goto error;
+#if JS_HAS_GENERATORS
         } else {
             Probes::enterScript(cx, script, script->function(), fp);
         }
+#endif
         if (cx->compartment->debugMode()) {
             JSTrapStatus status = ScriptDebugPrologue(cx, fp);
             switch (status) {
Only in .: jsinterp.o
Only in .: jsiter.o
Only in .: jslog2.o
Only in .: jsmath.o
Only in .: jsmemorymetrics.o
Only in .: jsnativestack.o
Only in .: jsnum.o
diff -aur /Users/cat/Downloads/origsm/js/src/jsobj.cpp ./jsobj.cpp
--- /Users/cat/Downloads/origsm/js/src/jsobj.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./jsobj.cpp	2012-11-19 14:26:03.000000000 -0800
@@ -5525,8 +5525,10 @@
             fprintf(stderr, " eval");
         if (!i.isIon() && i.interpFrame()->isYielding())
             fprintf(stderr, " yielding");
+#if JS_HAS_GENERATORS
         if (!i.isIon() && i.interpFrame()->isGeneratorFrame())
             fprintf(stderr, " generator");
+#endif
         fputc('\n', stderr);
 
         fprintf(stderr, "  scopeChain: (JSObject *) %p\n", (void *) i.scopeChain());
Only in .: jsobj.o
Only in .: json.o
Only in .: jsonparser.o
diff -aur /Users/cat/Downloads/origsm/js/src/jsopcode.cpp ./jsopcode.cpp
--- /Users/cat/Downloads/origsm/js/src/jsopcode.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./jsopcode.cpp	2012-11-12 16:34:08.000000000 -0800
@@ -4839,8 +4839,11 @@
                     js_free((void *)rval);
                     break;
                 }
-#endif /* JS_HAS_GENERATOR_EXPRS */
                 else if (sn && SN_TYPE(sn) == SRC_CONTINUE) {
+#else
+                sn = js_GetSrcNote(cx, jp->script, pc);
+                if (sn && SN_TYPE(sn) == SRC_CONTINUE) {
+#endif /* JS_HAS_GENERATOR_EXPRS */
                     /*
                      * Local function definitions have a lambda;setlocal;pop
                      * triple (annotated with SRC_CONTINUE) in the function
Only in .: jsopcode.o
Only in .: jsperf.o
Only in .: jsprf.o
diff -aur /Users/cat/Downloads/origsm/js/src/jsprobes.h ./jsprobes.h
--- /Users/cat/Downloads/origsm/js/src/jsprobes.h	2012-11-07 11:54:41.000000000 -0800
+++ ./jsprobes.h	2012-11-12 16:34:08.000000000 -0800
@@ -331,7 +331,9 @@
     JSRuntime *rt = cx->runtime;
     if (rt->spsProfiler.enabled()) {
         rt->spsProfiler.enter(cx, script, maybeFun);
+#if JS_HAS_GENERATORS
         JS_ASSERT_IF(!fp->isGeneratorFrame(), !fp->hasPushedSPSFrame());
+#endif
         fp->setPushedSPSFrame();
     }
 
Only in .: jsprobes.o
Only in .: jspropertycache.o
Only in .: jspropertytree.o
Only in .: jsproxy.o
Only in .: jsreflect.o
Only in .: jsscope.o
Only in .: jsscript.o
Only in .: jsstr.o
Only in .: jstypedarray.o
Only in .: jsutil.o
diff -aur /Users/cat/Downloads/origsm/js/src/jsversion.h ./jsversion.h
--- /Users/cat/Downloads/origsm/js/src/jsversion.h	2012-11-07 11:54:41.000000000 -0800
+++ ./jsversion.h	2012-11-19 15:12:32.000000000 -0800
@@ -124,20 +124,20 @@
 
 #elif 180 <= JS_VERSION && JS_VERSION <= 185
 
-#define JS_HAS_STR_HTML_HELPERS 1       /* has str.anchor, str.bold, etc. */
+#define JS_HAS_STR_HTML_HELPERS 0       /* has str.anchor, str.bold, etc. */
 #define JS_HAS_OBJ_PROTO_PROP   1       /* has o.__proto__ etc. */
-#define JS_HAS_OBJ_WATCHPOINT   1       /* has o.watch and o.unwatch */
-#define JS_HAS_TOSOURCE         1       /* has Object/Array toSource method */
+#define JS_HAS_OBJ_WATCHPOINT   0       /* has o.watch and o.unwatch */
+#define JS_HAS_TOSOURCE         0       /* has Object/Array toSource method */
 #define JS_HAS_CATCH_GUARD      1       /* has exception handling catch guard */
-#define JS_HAS_UNEVAL           1       /* has uneval() top-level function */
-#define JS_HAS_CONST            1       /* has JS2 const as alternative var */
+#define JS_HAS_UNEVAL           0       /* has uneval() top-level function */
+#define JS_HAS_CONST            0       /* has JS2 const as alternative var */
 #define JS_HAS_FUN_EXPR_STMT    1       /* has function expression statement */
-#define JS_HAS_NO_SUCH_METHOD   1       /* has o.__noSuchMethod__ handler */
-#define JS_HAS_GENERATORS       1       /* has yield in generator function */
-#define JS_HAS_BLOCK_SCOPE      1       /* has block scope via let/arraycomp */
-#define JS_HAS_DESTRUCTURING    2       /* has [a,b] = ... or {p:a,q:b} = ... */
-#define JS_HAS_GENERATOR_EXPRS  1       /* has (expr for (lhs in iterable)) */
-#define JS_HAS_EXPR_CLOSURES    1       /* has function (formals) listexpr */
+#define JS_HAS_NO_SUCH_METHOD   0       /* has o.__noSuchMethod__ handler */
+#define JS_HAS_GENERATORS       0       /* has yield in generator function */
+#define JS_HAS_BLOCK_SCOPE      0       /* has block scope via let/arraycomp */
+#define JS_HAS_DESTRUCTURING    0       /* has [a,b] = ... or {p:a,q:b} = ... */
+#define JS_HAS_GENERATOR_EXPRS  0       /* has (expr for (lhs in iterable)) */
+#define JS_HAS_EXPR_CLOSURES    0       /* has function (formals) listexpr */
 
 #else
 
@@ -149,7 +149,7 @@
 #define JS_HAS_NEW_GLOBAL_OBJECT        1
 
 /* Support for JS_MakeSystemObject. */
-#define JS_HAS_MAKE_SYSTEM_OBJECT       1
+#define JS_HAS_MAKE_SYSTEM_OBJECT       0
 
 /* Feature-test macro for evolving destructuring support. */
 #define JS_HAS_DESTRUCTURING_SHORTHAND  (JS_HAS_DESTRUCTURING == 2)
Only in .: jswatchpoint.o
Only in .: jsweakmap.o
Only in .: jsworkers.o
Only in .: jswrapper.o
Only in .: jsxml.o
Only in .: libjs_static.a
Only in .: libjs_static.a.desc
Only in .: libjs_static.armv7.a
Only in .: libjs_static.i386.a
Only in .: newsm.patch
Only in .: pm_stub.o
Only in .: prmjtime.o
Only in .: selfhosted.js
Only in .: selfhosted.out.h
Only in .: sharkctl.o
Only in ./shell: .deps
Only in ./shell: Makefile
Only in ./shell: js
Only in ./shell: js.o
Only in ./shell: jsheaptools.o
Only in ./shell: jsoptparse.o
Only in ./shell: tmpQjIErE.list
Only in .: strtod.o
Only in ./tests: Makefile
Only in .: unallmakefiles
diff -aur /Users/cat/Downloads/origsm/js/src/vm/Debugger.cpp ./vm/Debugger.cpp
--- /Users/cat/Downloads/origsm/js/src/vm/Debugger.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./vm/Debugger.cpp	2012-11-12 16:34:12.000000000 -0800
@@ -3258,6 +3258,8 @@
     return true;
 }
 
+#if JS_HAS_GENERATORS
+
 static JSBool
 DebuggerFrame_getGenerator(JSContext *cx, unsigned argc, Value *vp)
 {
@@ -3266,6 +3268,8 @@
     return true;
 }
 
+#endif
+
 static JSBool
 DebuggerFrame_getConstructing(JSContext *cx, unsigned argc, Value *vp)
 {
@@ -3716,7 +3720,9 @@
     JS_PSG("callee", DebuggerFrame_getCallee, 0),
     JS_PSG("constructing", DebuggerFrame_getConstructing, 0),
     JS_PSG("environment", DebuggerFrame_getEnvironment, 0),
+#if JS_HAS_GENERATORS
     JS_PSG("generator", DebuggerFrame_getGenerator, 0),
+#endif
     JS_PSG("live", DebuggerFrame_getLive, 0),
     JS_PSG("offset", DebuggerFrame_getOffset, 0),
     JS_PSG("older", DebuggerFrame_getOlder, 0),
diff -aur /Users/cat/Downloads/origsm/js/src/vm/NumericConversions.h ./vm/NumericConversions.h
--- /Users/cat/Downloads/origsm/js/src/vm/NumericConversions.h	2012-11-07 11:54:41.000000000 -0800
+++ ./vm/NumericConversions.h	2012-11-12 16:34:12.000000000 -0800
@@ -152,13 +152,15 @@
 
 /* ES5 9.5 ToInt32 (specialized for doubles). */
 inline int32_t
-ToInt32(double d)
+ToInt32(double dd)
 {
 #if defined (__arm__) && defined (__GNUC__)
+    float d = dd;
     int32_t i;
     uint32_t    tmp0;
     uint32_t    tmp1;
     uint32_t    tmp2;
+    uint32_t    tmp3;
     asm (
     // We use a pure integer solution here. In the 'softfp' ABI, the argument
     // will start in r0 and r1, and VFP can't do all of the necessary ECMA
@@ -172,12 +174,12 @@
     // %1, %2 and %3 are used as temporary values.
 
     // Extract the exponent.
-"   mov     %1, %R4, LSR #20\n"
+"   mov     %1, %4, LSR #20\n"
 "   bic     %1, %1, #(1 << 11)\n"  // Clear the sign.
 
     // Set the implicit top bit of the mantissa. This clobbers a bit of the
     // exponent, but we have already extracted that.
-"   orr     %R4, %R4, #(1 << 20)\n"
+"   orr     %4, %4, #(1 << 20)\n"
 
     // Special Cases
     //   We should return zero in the following special cases:
@@ -213,15 +215,16 @@
     // a logical OR to push long shifts into the 32 <= (exp&0xff) <= 255 range.
 "   bic     %2, %3, #0xff\n"
 "   orr     %3, %3, %2, LSR #3\n"
+
     // We can now perform a straight shift, avoiding the need for any
     // conditional instructions or extra branches.
-"   mov     %Q4, %Q4, LSL %3\n"
+"   mov     %5, %5, LSL %3\n"
 "   b       2f\n"
 "1:\n" // Shift r0 right by 52-exp.
     // We know that 0 <= exp < 52, and we can shift up to 255 bits so 52-exp
     // will always be a valid shift and we can sk%3 the range check for this case.
 "   rsb     %3, %1, #52\n"
-"   mov     %Q4, %Q4, LSR %3\n"
+"   mov     %5, %5, LSR %3\n"
 
     //  %1 = (decoded) exponent
     //  %R4 = upper mantissa and sign
@@ -236,7 +239,7 @@
     // it left more to remove the sign and exponent so it is effectively
     // pre-shifted by 31 bits.
 "   subs    %3, %1, #31\n"          // Calculate exp-31
-"   mov     %1, %R4, LSL #11\n"     // Re-use %1 as a temporary register.
+"   mov     %1, %4, LSL #11\n"     // Re-use %1 as a temporary register.
 "   bmi     3f\n"
 
     // Shift %R4 left by exp-31.
@@ -258,25 +261,26 @@
 
 "4:\n"
     // Combine the converted parts.
-"   orr     %Q4, %Q4, %2\n"
+"   orr     %5, %5, %2\n"
     // Negate the result if we have to, and move it to %0 in the process. To
     // avoid conditionals, we can do this by inverting on %R4[31], then adding
     // %R4[31]>>31.
-"   eor     %Q4, %Q4, %R4, ASR #31\n"
-"   add     %0, %Q4, %R4, LSR #31\n"
+"   eor     %5, %5, %4, ASR #31\n"
+"   add     %0, %5, %4, LSR #31\n"
 "   b       9f\n"
+
 "8:\n"
     // +/-INFINITY, +/-0, subnormals, NaNs, and anything else out-of-range that
     // will result in a conversion of '0'.
 "   mov     %0, #0\n"
 "9:\n"
-    : "=r" (i), "=&r" (tmp0), "=&r" (tmp1), "=&r" (tmp2), "=&r" (d)
+    : "=r" (i), "=&r" (tmp0), "=&r" (tmp1), "=&r" (tmp2), "=&r" (d), "=r" (tmp3)
     : "4" (d)
     : "cc"
         );
     return i;
 #else
-    return ToIntWidth<32, int32_t>(d);
+    return ToIntWidth<32, int32_t>(dd);
 #endif
 }
 
diff -aur /Users/cat/Downloads/origsm/js/src/vm/ScopeObject.cpp ./vm/ScopeObject.cpp
--- /Users/cat/Downloads/origsm/js/src/vm/ScopeObject.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./vm/ScopeObject.cpp	2012-11-12 16:34:12.000000000 -0800
@@ -1579,7 +1579,7 @@
             e.removeFront();
             continue;
         }
-
+#if JS_HAS_GENERATORS
         /*
          * As explained in onGeneratorFrameChange, liveScopes includes
          * suspended generator frames. Since a generator can be finalized while
@@ -1592,6 +1592,7 @@
                 continue;
             }
         }
+#endif
     }
 }
 
@@ -1869,6 +1870,7 @@
 StackFrame *
 DebugScopes::hasLiveFrame(ScopeObject &scope)
 {
+#if JS_HAS_GENERATORS
     if (LiveScopeMap::Ptr p = liveScopes.lookup(&scope)) {
         StackFrame *fp = p->value;
 
@@ -1888,6 +1890,7 @@
 
         return fp;
     }
+#endif
     return NULL;
 }
 
diff -aur /Users/cat/Downloads/origsm/js/src/vm/Stack.cpp ./vm/Stack.cpp
--- /Users/cat/Downloads/origsm/js/src/vm/Stack.cpp	2012-11-07 11:54:41.000000000 -0800
+++ ./vm/Stack.cpp	2012-11-12 16:34:12.000000000 -0800
@@ -97,11 +97,15 @@
                                const Value *othervp, Value *othersp)
 {
     JS_ASSERT(vp == (Value *)this - ((Value *)otherfp - othervp));
+#if JS_HAS_GENERATORS
     JS_ASSERT(othervp == otherfp->generatorArgsSnapshotBegin());
+#endif
     JS_ASSERT(othersp >= otherfp->slots());
+#if JS_HAS_GENERATORS
     JS_ASSERT(othersp <= otherfp->generatorSlotsSnapshotBegin() + otherfp->script()->nslots);
+#endif
     JS_ASSERT((Value *)this - vp == (Value *)otherfp - othervp);
-
+#if JS_HAS_GENERATORS
     /* Copy args, StackFrame, and slots. */
     const Value *srcend = otherfp->generatorArgsSnapshotEnd();
     Value *dst = vp;
@@ -110,21 +114,30 @@
         if (doPostBarrier)
             HeapValue::writeBarrierPost(*dst, dst);
     }
+#endif
+    // MAYBE THIS IS BROKEN -cat
 
     *this = *otherfp;
     if (doPostBarrier)
         writeBarrierPost();
 
+#if JS_HAS_GENERATORS
     srcend = othersp;
     dst = slots();
+#else
+    const Value *srcend = otherfp->actuals();
+    Value *dst = slots();
+#endif
     for (const Value *src = otherfp->slots(); src < srcend; src++, dst++) {
         *dst = *src;
         if (doPostBarrier)
             HeapValue::writeBarrierPost(*dst, dst);
     }
 
+#if JS_HAS_GENERATORS
     if (cx->compartment->debugMode())
         cx->runtime->debugScopes->onGeneratorFrameChange(otherfp, this, cx);
+#endif
 }
 
 /* Note: explicit instantiation for js_NewGenerator located in jsiter.cpp. */
@@ -154,6 +167,8 @@
         HeapValue::writeBarrierPost(rval_, &rval_);
 }
 
+#if JS_HAS_GENERATORS
+
 JSGenerator *
 StackFrame::maybeSuspendedGenerator(JSRuntime *rt)
 {
@@ -175,6 +190,8 @@
     return gen;
 }
 
+#endif
+
 jsbytecode *
 StackFrame::prevpcSlow(InlinedSite **pinlined)
 {
@@ -280,7 +297,9 @@
 {
     RootedScript script(cx, this->script());
 
+#if JS_HAS_GENERATORS
     JS_ASSERT(!isGeneratorFrame());
+#endif
     JS_ASSERT(cx->regs().pc == script->code);
 
     if (isEvalFrame()) {
@@ -1122,6 +1141,8 @@
     Debug_SetValueRangeToCrashOnTouch(space().firstUnused(), oldend);
 }
 
+#if JS_HAS_GENERATORS
+
 bool
 ContextStack::pushGeneratorFrame(JSContext *cx, JSGenerator *gen, GeneratorFrameGuard *gfg)
 {
@@ -1192,6 +1213,8 @@
     JS_ASSERT(ImplicitCast<const FrameGuard>(gfg).pushed());
 }
 
+#endif
+
 bool
 ContextStack::saveFrameChain()
 {
diff -aur /Users/cat/Downloads/origsm/js/src/vm/Stack.h ./vm/Stack.h
--- /Users/cat/Downloads/origsm/js/src/vm/Stack.h	2012-11-07 11:54:41.000000000 -0800
+++ ./vm/Stack.h	2012-11-12 16:34:12.000000000 -0800
@@ -855,7 +855,7 @@
     void **addressOfNativeReturnAddress() {
         return &ncode_;
     }
-
+#if JS_HAS_GENERATORS
     /*
      * A "generator" frame is a function frame associated with a generator.
      * Since generators are not executed LIFO, the VM copies a single abstract
@@ -893,7 +893,7 @@
         JS_ASSERT(isGeneratorFrame());
         return (Value *)(this + 1);
     }
-
+#endif
     enum TriggerPostBarriers {
         DoPostBarrier = true,
         NoPostBarrier = false
@@ -901,8 +901,9 @@
     template <TriggerPostBarriers doPostBarrier>
     void copyFrameAndValues(JSContext *cx, Value *vp, StackFrame *otherfp,
                             const Value *othervp, Value *othersp);
-
+#if JS_HAS_GENERATORS
     JSGenerator *maybeSuspendedGenerator(JSRuntime *rt);
+#endif
 
     /*
      * js::Execute pushes both global and function frames (since eval() in a
