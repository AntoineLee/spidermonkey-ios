diff -r 5cce3845d654 js/src/Makefile.in
--- a/js/src/Makefile.in	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/Makefile.in	Tue Feb 15 22:06:37 2011 -0800
@@ -295,7 +295,7 @@
 
 ifeq ($(TARGET_CPU), powerpc)
 
-VPATH +=	$(srcdir)/assembler \
+VPATH += $(srcdir)/assembler \
 		$(srcdir)/assembler/wtf \
 		$(srcdir)/yarr/pcre \
 		$(NULL)
@@ -834,7 +834,7 @@
 # Needed to "configure" it correctly.  Unfortunately these
 # flags wind up being applied to all code in js/src, not just
 # the code in js/src/assembler.
-CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1 -DENABLE_JIT=1
+CXXFLAGS += -DUSE_SYSTEM_MALLOC=1
 
 INCLUDES +=	-I$(srcdir)/assembler -I$(srcdir)/yarr
 
diff -r 5cce3845d654 js/src/assembler/jit/ExecutableAllocator.h
--- a/js/src/assembler/jit/ExecutableAllocator.h	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/assembler/jit/ExecutableAllocator.h	Tue Feb 15 22:06:37 2011 -0800
@@ -227,7 +227,7 @@
 #endif
 
 
-#if WTF_CPU_X86 || WTF_CPU_X86_64
+#if WTF_CPU_X86 || WTF_CPU_X86_64 || WTF_PLATFORM_IPHONE
     static void cacheFlush(void*, size_t)
     {
     }
diff -r 5cce3845d654 js/src/assembler/jit/ExecutableAllocatorPosix.cpp
--- a/js/src/assembler/jit/ExecutableAllocatorPosix.cpp	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/assembler/jit/ExecutableAllocatorPosix.cpp	Tue Feb 15 22:06:37 2011 -0800
@@ -53,7 +53,6 @@
     ASSERT_UNUSED(result, !result);
 }
 
-#if WTF_ENABLE_ASSEMBLER_WX_EXCLUSIVE
 void ExecutableAllocator::reprotectRegion(void* start, size_t size, ProtectionSeting setting)
 {
     if (!pageSize)
@@ -72,7 +71,6 @@
 
     mprotect(pageStart, size, (setting == Writable) ? PROTECTION_FLAGS_RW : PROTECTION_FLAGS_RX);
 }
-#endif
 
 #if WTF_CPU_ARM_TRADITIONAL && WTF_PLATFORM_LINUX && WTF_COMPILER_RVCT
 __asm void ExecutableAllocator::cacheFlush(void* code, size_t size)
diff -r 5cce3845d654 js/src/assembler/wtf/Platform.h
--- a/js/src/assembler/wtf/Platform.h	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/assembler/wtf/Platform.h	Tue Feb 15 22:06:37 2011 -0800
@@ -879,7 +879,7 @@
  || WTF_CPU_ARM_THUMB2 \
  || WTF_CPU_ARM_TRADITIONAL \
  || WTF_CPU_X86)
-#define ENABLE_YARR_JIT 1
+#define ENABLE_YARR_JIT 0
 #else
 #define ENABLE_YARR_JIT 0
 #endif
diff -r 5cce3845d654 js/src/config/autoconf.mk.in
--- a/js/src/config/autoconf.mk.in	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/config/autoconf.mk.in	Tue Feb 15 22:06:37 2011 -0800
@@ -97,7 +97,6 @@
 
 NS_TRACE_MALLOC = @NS_TRACE_MALLOC@
 INCREMENTAL_LINKER = @INCREMENTAL_LINKER@
-MACOSX_DEPLOYMENT_TARGET = @MACOSX_DEPLOYMENT_TARGET@
 BUILD_STATIC_LIBS = @BUILD_STATIC_LIBS@
 ENABLE_TESTS	= @ENABLE_TESTS@
 
diff -r 5cce3845d654 js/src/configure.in
--- a/js/src/configure.in	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/configure.in	Tue Feb 15 22:06:37 2011 -0800
@@ -1736,11 +1736,11 @@
     STRIP="$STRIP -x -S"
     _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
-    LDFLAGS="$LDFLAGS -framework Cocoa"
+    LDFLAGS="$LDFLAGS"
     # The ExceptionHandling framework is needed for Objective-C exception
     # logging code in nsObjCExceptions.h. Currently we only use that in debug
     # builds.
-    MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS -framework ExceptionHandling"
+    MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS"
 
     dnl DTrace and -dead_strip don't interact well. See bug 403132.
     dnl ===================================================================
@@ -4044,9 +4044,9 @@
   case "$target_cpu" in
     arm*)
       if test "$GNU_CC"; then
-        CFLAGS="$CFLAGS -march=armv7-a -mthumb -Wa, -march=armv7-a -Wa, -mthumb"
-        CXXFLAGS="$CXXFLAGS -march=armv7-a -mthumb -Wa, -march=armv7-a -Wa, -mthumb"
-        ASFLAGS="$ASFLAGS -march=armv7-a -mthumb"
+        CFLAGS="$CFLAGS -march=armv7 -mthumb -Wa, -march=armv7 -Wa, -mthumb"
+        CXXFLAGS="$CXXFLAGS -march=armv7 -mthumb -Wa, -march=armv7 -Wa, -mthumb"
+        ASFLAGS="$ASFLAGS -march=armv7 -mthumb"
       else
         AC_MSG_ERROR([--enable-thumb2 is not supported for non-GNU toolchains])
       fi
diff -r 5cce3845d654 js/src/jsnum.h
--- a/js/src/jsnum.h	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/jsnum.h	Tue Feb 15 22:06:37 2011 -0800
@@ -101,7 +101,7 @@
 #ifdef WIN32
     return _finite(d);
 #else
-    return finite(d);
+    return isfinite(d);
 #endif
 }
 
diff -r 5cce3845d654 js/src/jsregexp.cpp
--- a/js/src/jsregexp.cpp	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/jsregexp.cpp	Tue Feb 15 22:06:37 2011 -0800
@@ -224,7 +224,7 @@
     bool found;
     if (jsRegExpExecute(cx, compiled, chars, len, *lastIndex - inputOffset, buf, bufCount) < 0)
         return false; /* FIXME: error code reporting for PPC. */
-    found = buf[0] > 0;
+    found = buf[0] >= 0;
 #endif
     if (!found) {
         *rval = NullValue();
diff -r 5cce3845d654 js/src/jsregexpinlines.h
--- a/js/src/jsregexpinlines.h	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/jsregexpinlines.h	Tue Feb 15 22:06:37 2011 -0800
@@ -186,7 +186,9 @@
     compiled = jsRegExpCompile(pattern.chars(), pattern.length(),
                                ignoreCase() ? JSRegExpIgnoreCase : JSRegExpDoNotIgnoreCase,
                                multiline() ? JSRegExpMultiline : JSRegExpSingleLine,
-                               NULL, &error);
+                               NULL, &error, &parenCount);
+	
+	// TODO: set parenCount here
     if (!error)
         return true;
     handlePCREError(cx, error);
diff -r 5cce3845d654 js/src/yarr/pcre/pcre.h
--- a/js/src/yarr/pcre/pcre.h	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/yarr/pcre/pcre.h	Tue Feb 15 22:06:37 2011 -0800
@@ -58,7 +58,7 @@
 
 JSRegExp* jsRegExpCompile(const UChar* pattern, int patternLength,
     JSRegExpIgnoreCaseOption, JSRegExpMultilineOption,
-    unsigned* numSubpatterns, int *error);
+    unsigned* numSubpatterns, int *error, unsigned int *parenCount);
 
 int jsRegExpExecute(JSContext *, const JSRegExp*,
     const UChar* subject, int subjectLength, int startOffset,
diff -r 5cce3845d654 js/src/yarr/pcre/pcre_compile.cpp
--- a/js/src/yarr/pcre/pcre_compile.cpp	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/yarr/pcre/pcre_compile.cpp	Tue Feb 15 22:06:37 2011 -0800
@@ -2565,7 +2565,7 @@
 
 JSRegExp* jsRegExpCompile(const UChar* pattern, int patternLength,
                 JSRegExpIgnoreCaseOption ignoreCase, JSRegExpMultilineOption multiline,
-                unsigned* numSubpatterns, int *error)
+                unsigned* numSubpatterns, int *error, unsigned int *parenCount)
 {
     /* We can't pass back an error message if error is NULL; I guess the best we
      can do is just return NULL, but we can set a code value if there is a code pointer. */
@@ -2693,6 +2693,7 @@
     if (numSubpatterns)
         *numSubpatterns = re->topBracket;
 
+	*parenCount = cd.numCapturingBrackets;
     return re;
 }
 
diff -r 5cce3845d654 js/src/yarr/pcre/pcre_exec.cpp
--- a/js/src/yarr/pcre/pcre_exec.cpp	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/yarr/pcre/pcre_exec.cpp	Tue Feb 15 22:06:37 2011 -0800
@@ -2143,5 +2143,5 @@
     } while (!(re->options & IsAnchoredOption) && startMatch <= endSubject);
     
     DPRINTF((">>>> returning PCRE_ERROR_NOMATCH\n"));
-    return JSRegExpErrorNoMatch;
+    return 1;//JSRegExpErrorNoMatch;
 }
diff -r 5cce3845d654 js/src/yarr/pcre/pcre_internal.h
--- a/js/src/yarr/pcre/pcre_internal.h	Mon Aug 16 19:14:38 2010 -0400
+++ b/js/src/yarr/pcre/pcre_internal.h	Tue Feb 15 22:06:37 2011 -0800
@@ -344,6 +344,7 @@
     
     unsigned short firstByte;
     unsigned short reqByte;
+
 };
 
 /* Internal shared data tables. These are tables that are used by more than one
